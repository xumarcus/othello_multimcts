{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Header","subtitle","className","Boxed","element","Board","board","handleClick","blacks","get_blacks","whites","get_whites","moves","get_moves","arr","Array","i","mask","push","onClick","App","useState","setWasm","setBoard","setSubtitle","humanSkipped","setHumanSkipped","useEffect","a","wasm_","JSBoard","useLayoutEffect","is_human_turn","alert","setTimeout","fromAI","run_ai","get_board","prob","Math","round","get_score","count","get_count","diff","count_blacks","count_whites","board_t","place","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAMA,SAASA,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SACd,OACI,sBAAKC,UAAU,SAAf,UACI,yCACA,4BAAKD,OAKjB,SAASE,EAAMC,GACX,OAAO,qBAAKF,UAAU,MAAf,SAAuBE,IAGlC,SAASC,EAAT,GAKI,IALoC,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACdC,EAASF,EAAMG,aACfC,EAASJ,EAAMK,aACfC,EAAQN,EAAMO,YAChBC,EAAM,IAAIC,MAAM,IAJe,WAK1BC,GACL,IAAMC,EAAQ,IAAO,IAAMD,EACvBC,EAAOL,EACPE,EAAII,KAAKf,EACL,qBAAKD,UAAU,kBACfiB,QAAS,kBAAMZ,EAAYS,QAExBC,EAAOT,EACdM,EAAII,KAAKf,EACL,qBAAKD,UAAU,sBAEZe,EAAOP,EACdI,EAAII,KAAKf,EACL,qBAAKD,UAAU,sBAGnBY,EAAII,KAAKf,EAAM,QAhBda,EAAI,GAAIA,EAAI,IAAKA,IAAM,EAAvBA,GAmBT,OAAOF,EAGX,IA+DeM,EA/DH,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACDC,GADC,aAEYD,mBAAS,MAFrB,mBAEPf,EAFO,KAEAiB,EAFA,OAGkBF,mBA7Cd,8BA0CJ,mBAGPpB,EAHO,KAGGuB,EAHH,OAI0BH,oBAAS,GAJnC,mBAIPI,EAJO,KAIOC,EAJP,KAKdC,oBAAS,sBAAC,4BAAAC,EAAA,sEACc,6BADd,OACAC,EADA,OAENP,EAAQO,GACRN,EAAS,IAAIM,EAAMC,SAHb,2CAIP,IAiCH,OAtBAC,2BAAgB,WACZ,GAAc,OAAVzB,IACAA,EAAM0B,gBAKV,GAHWP,GACPQ,MAAM,qBAEN3B,EAAMO,YACNa,GAAgB,GAChBQ,YAAW,WACP,IAAMC,EAAS7B,EAAM8B,OAAO,MAC5Bb,EAASY,EAAOE,aAChB,IAAMC,EAAOC,KAAKC,MAA2B,IAArBL,EAAOM,aACzBC,EAAQP,EAAOQ,YACrBnB,EAAY,YAAD,OAAac,EAAb,qBAA8BI,MAC1C,QACA,CACH,IAAME,EAAOtC,EAAMuC,eAAiBvC,EAAMwC,eAC1Cb,MAAMW,EAAO,EAAI,aAAgBA,EAAO,EAAI,aAAe,kBAEhE,CAACtC,IAEAA,EAEI,sBAAKJ,UAAU,YAAf,UACI,qBAAKA,UAAU,mBAAf,SACMI,EAAMuC,iBAEZ,cAAC7C,EAAD,CAAQC,SAAUA,IAClB,qBAAKC,UAAU,mBAAf,SACMI,EAAMwC,iBAER,cAACzC,EAAD,CACAC,MAAOA,EACPC,YA3CI,SAACS,GACjBU,GAAgB,GAChB,IAAIqB,EAAUzC,EAAM0C,MAAM,IAAO,IAAMhC,GACnC+B,EAAQf,iBACRC,MAAM,mBAEVV,EAASwB,SA0CF,oDC7FAE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3efd6112.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst COPYRIGHT_STR = \"Copyright @ 2020 Marcus Xu\";\n\nfunction Header({ subtitle }) {\n    return (\n        <div className=\"header\">\n            <h1>Othello</h1>\n            <p>{ subtitle }</p>\n        </div>\n    );\n}\n\nfunction Boxed(element) {\n    return <div className=\"box\">{ element }</div>;\n}\n\nfunction Board({ board, handleClick }) {\n    const blacks = board.get_blacks(); \n    const whites = board.get_whites(); \n    const moves = board.get_moves();\n    var arr = new Array(64);\n    for (let i = 0n; i < 64n; i++) {\n        const mask = (1n << (63n - i));\n        if (mask & moves) {\n            arr.push(Boxed(\n                <div className=\"circle is-empty\"\n                onClick={() => handleClick(i)}></div>\n            ));\n        } else if (mask & blacks) {\n            arr.push(Boxed(\n                <div className=\"circle is-black\"></div>\n            ));\n        } else if (mask & whites) {\n            arr.push(Boxed(\n                <div className=\"circle is-white\"></div>\n            ));\n        } else {\n            arr.push(Boxed(null));\n        }\n    }\n    return arr;\n}\n\nconst App = () => {\n    const [wasm, setWasm] = useState(null);\n    const [board, setBoard] = useState(null);\n    const [subtitle, setSubtitle] = useState(COPYRIGHT_STR);\n    const [humanSkipped, setHumanSkipped] = useState(false);\n    useEffect(async () => {\n        const wasm_ = await import(\"wasm\");\n        setWasm(wasm_);\n        setBoard(new wasm_.JSBoard());\n    }, [/* run once */]);\n\n    const handleClick = (i) => {\n        setHumanSkipped(false);\n        let board_t = board.place(1n << (63n - i));\n        if (board_t.is_human_turn()) {\n            alert(\"AI has to pass.\");\n        }\n        setBoard(board_t);\n    };\n\n    useLayoutEffect(() => {\n        if (board === null) return;\n        if (board.is_human_turn()) {\n            return;\n        } else if (humanSkipped) {\n            alert(\"You have to pass.\");\n        }\n        if (board.get_moves()) {\n            setHumanSkipped(true);\n            setTimeout(() => {\n                const fromAI = board.run_ai(1500);\n                setBoard(fromAI.get_board());\n                const prob = Math.round(fromAI.get_score() * 100.0);\n                const count = fromAI.get_count();\n                setSubtitle(`AI Prob: ${prob}%; Nodes: ${count}`);\n            }, 10);    \n        } else {\n            const diff = board.count_blacks() - board.count_whites();\n            alert(diff > 0 ? \"You win...\" : (diff < 0 ? \"You sucks!\" : \"It's a draw\"));\n        }    \n    }, [board]);\n\n    if (board) {\n        return (\n            <div className=\"container\">\n                <div className=\"counter is-black\">\n                    { board.count_blacks() }\n                </div>\n                <Header subtitle={subtitle}></Header>\n                <div className=\"counter is-white\">\n                    { board.count_whites() }\n                </div>\n                    <Board\n                    board={board}\n                    handleClick={handleClick}>\n                    </Board>\n            </div>\n        );\n    } else {\n        return <h1>Detecting WASM...</h1>;\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}